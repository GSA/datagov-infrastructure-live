---
name: Terraform

on:
  push:
    branches:
      - master
  pull_request:

env:
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  AWS_DEFAULT_REGION: us-east-1
  TF_VAR_catalog_db_password: "${{ secrets.TF_VAR_catalog_db_password }}"
  TF_VAR_dashboard_db_password: "${{ secrets.TF_VAR_dashboard_db_password }}"
  TF_VAR_catalog_next_db_password: "${{ secrets.TF_VAR_catalog_next_db_password }}"
  TF_VAR_inventory_next_db_password: "${{ secrets.TF_VAR_inventory_next_db_password }}"
  TF_VAR_inventory_db_password: "${{ secrets.TF_VAR_inventory_db_password }}"
  TF_VAR_wordpress_db_password: "${{ secrets.TF_VAR_wordpress_db_password }}"
  TF_VAR_catalog_next_redis_password: "${{ secrets.TF_VAR_catalog_next_redis_password }}"
  TF_VAR_inventory_next_redis_password: "${{ secrets.TF_VAR_inventory_next_redis_password }}"


jobs:
  terraform:
    name: terraform
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.12.0

      - name: init
        run: terraform init

      - name: fmt
        run: terraform fmt -check

      - name: plan
        id: plan
        run: |
          set -o pipefail
          tfplan_file=$(mktemp)
          echo "::set-output name=tfplan::$tfplan_file"
          terraform plan -input=false -out=$tfplan_file -no-color
        continue-on-error: true  # Make sure to post the error to the PR

      - name: publish plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v3
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: check plan status
        if: steps.plan.outcome != 'success'
        run: |
          echo "Check plan output."
          exit 1

        # Add the sandbox ssh key for terraform remote script provisioning
      - name: configure ssh-agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: |
            ${{ secrets.SSH_DATAGOV_SANDBOX }}

        # On push to master, build or change infrastructure according to
        # Terraform configuration files
      - name: apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply ${{ steps.plan.outputs.tfplan }}
